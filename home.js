// Գրել ֆունկցիա, որը որպես արգումենտ ստանում է ամբողջ թվային զանգված, 
// և վերադարձնում նույն զանգվածը՝ զույգ տարրերը զանգվածի սկզբից, իսկ կենտերը՝ վերջից տեղավորած:

 




// Գրել ֆունկցիա, որը որպես արգումենտ ստանում է զանգված, և վերադարձնում նորը՝ միայն պարզ թվերով։

// Գրել ֆունկցիա, որը որպես արգումենտ ստանում է 2 զանգված և վերադարձնում դրանք միավորված ու սորտավորված (առանց նոր զանգված վերադարձնելու)։
// Գրել ֆունկցիա, որը որպես արգումենտ ստանում է զանգված, և ստուգում արդյոք այդ զանգվածի յուրաքանչյուր տարր առանց մնացորդ բաժանվում է իր ինդեքսին թե ոչ (չդիտարկել 0-րդ ինդեքսի դեպքը)։
// Գրել ֆունկցիա, որը որպես արգումենտ կստանա զանգված, դրա էլեմենտները կդարձնի օբյեկտի արժեքներ (value), որն էլ կվերադարձնի։
// Գրել ֆունկցիա, որը որպես արգումենտ ստանում է զանգված, և վերադարձնում այդ զանգվածի ամենաերկար աճող հաջորդականությունը։
// Գրել ֆունկցիա, որը հաշվում և վերադարձնում է քառակուսային մատրիցի գլխավոր անկյունագծից վերև գտնվող տարրերի գումարը (գլխավոր անկյունագծինը ներառյալ)։
// Գրել ֆունկցիա, որը կստանա քառակուսային մատրից և գլխավոր անկյունագծի համեմատ կկատարի սիմետրիկ արտապատկերում (արտապատկերումը կատարել նույն մատրիցում)։ Այսինքն մատրիցի [i][j] էլեմենտը կհայտնվի [j][i] դիրքում։
// Իրականացնել Binary search որոնման ալգորիթմը։
// Տրված թվային զանգվածը սորտավորել Quick Sort ալգորիթմով։


class  Rang{
    constructor(name){
        this.name = name;
    }
}

let a = new Rang();
 a.name = "vazgen"
console.log( Rang instanceof Object.prototype.constructor
    )